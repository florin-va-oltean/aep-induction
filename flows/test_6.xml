<?xml version="1.0" encoding="UTF-8"?>
<mxGraphModel dx="2068" dy="782" grid="1" gridSize="10" guides="1" tooltips="1" connect="1"
              fold="1"
              page="1"
              pageScale="1"
              pageWidth="826"
              pageHeight="1169">
   <root>
      <mxCell id="0"/>
      <mxCell id="1" parent="0"/>
      <start action="com.eitg.quasar.nexus.middleware.scxml.handlers.StartHandler"
             label="start"
             initial="1"
             name=""
             traceField=""
             traceList=""
             traceTimeout=""
             traceCondition=""
             id="2">
         <mxCell style="image;html=1;image=clipart/start-button.png" parent="1" vertex="1">
            <mxGeometry x="-30" y="290" width="80" height="80" as="geometry"/>
         </mxCell>
      </start>
      <record-event action="io.qsrlabs.nexus.middleware.scxml.handlers.RecordIncomingRequestDetails"
                    label="put a label on incoming &#xA;request"
                    name="initial_http_req"
                    id="5">
         <mxCell style="image;html=1;image=clipart/record-event-details.png" parent="1"
                 vertex="1">
            <mxGeometry x="100" y="300" width="120" height="60" as="geometry"/>
         </mxCell>
      </record-event>
      <mxCell id="6" value="*" style="edgeStyle=orthogonalEdgeStyle;rounded=0;html=1;"
              parent="1"
              source="2"
              target="5"
              edge="1">
         <mxGeometry relative="1" as="geometry"/>
      </mxCell>
      <http-response action="io.qsrlabs.nexus.http.gui.HttpResponseHandler"
                     label="send back the response&#xA;prepared previously"
                     response-for="initial_http_req"
                     status="spel:#initial[&#34;status&#34;]"
                     body="spel:#session[&#34;response&#34;]"
                     header.Content-Type="application/json"
                     continue="yes"
                     id="9">
         <mxCell style="image;html=1;image=clipart/http-response.png" parent="1" vertex="1">
            <mxGeometry x="1030" y="300" width="120" height="60" as="geometry"/>
         </mxCell>
      </http-response>
      <http-client-request action="io.qsrlabs.nexus.redis.http.gui.RequestHandler" label="bored api"
                           queue="http-requests"
                           queue-db="queue-db"
                           url="https://www.boredapi.com/api/activity"
                           timeout-ms="spel:2000"
                           request-method="get"
                           header.Accept="application/json"
                           header.Host="www.boredapi.com"
                           id="16">
         <mxCell style="image;html=1;image=clipart/http-request.png" parent="1" vertex="1">
            <mxGeometry x="430" y="300" width="120" height="60" as="geometry"/>
         </mxCell>
      </http-client-request>
      <object-builder action="io.qsrlabs.nexus.middleware.scxml.handlers.ObjectBuilder"
                      label="prepare error"
                      response.content.error="An error occured! cannot fulfill request!"
                      traceColor="#FD0432FF"
                      id="20">
         <mxCell style="image;html=1;image=clipart/build-object.png" parent="1" vertex="1">
            <mxGeometry x="640" y="140" width="120" height="60" as="geometry"/>
         </mxCell>
      </object-builder>
      <mxCell id="21" value="*" style="edgeStyle=orthogonalEdgeStyle;rounded=0;html=1;"
              parent="1"
              source="16"
              target="20"
              edge="1">
         <mxGeometry relative="1" as="geometry">
            <Array as="points">
               <mxPoint x="490" y="170"/>
            </Array>
         </mxGeometry>
      </mxCell>
      <mxCell id="24" style="edgeStyle=orthogonalEdgeStyle;rounded=0;html=1;" parent="1"
              source="20"
              target="9"
              edge="1">
         <mxGeometry relative="1" as="geometry"/>
      </mxCell>
      <event-generator-handler action="io.qsrlabs.nexus.middleware.scxml.handlers.EvaluateParamsAndGenerateEvent"
                               label="check number of participants"
                               evt.retry="spel:#event[&#34;body&#34;][&#34;participants&#34;] lt 2"
                               id="31">
         <mxCell style="image;html=1;image=clipart/check-list.png" parent="1" vertex="1">
            <mxGeometry x="640" y="300" width="120" height="60" as="geometry"/>
         </mxCell>
      </event-generator-handler>
      <mxCell id="32" value="http.200"
              style="edgeStyle=orthogonalEdgeStyle;rounded=0;html=1;"
              parent="1"
              source="16"
              target="31"
              edge="1">
         <mxGeometry relative="1" as="geometry"/>
      </mxCell>
      <clojure-library action="io.qsrlabs.nexus.timers.gui.TimerRequest"
                       label="arm a timer for 1000 ms"
                       timerQueue="arm-timer"
                       timerExpiry="spel: 1000L"
                       timerEventName="call_api_again"
                       timerEventType="timer"
                       id="33">
         <mxCell style="image;html=1;image=clipart/timer.png" parent="1" vertex="1">
            <mxGeometry x="640" y="740" width="120" height="60" as="geometry"/>
         </mxCell>
      </clojure-library>
      <mxCell id="35" value="call_api_again"
              style="edgeStyle=orthogonalEdgeStyle;rounded=0;html=1;"
              parent="1"
              source="33"
              target="16"
              edge="1">
         <mxGeometry relative="1" as="geometry"/>
      </mxCell>
      <mxCell id="36" value="*" style="edgeStyle=orthogonalEdgeStyle;rounded=0;html=1;"
              parent="1"
              source="31"
              target="37"
              edge="1">
         <mxGeometry relative="1" as="geometry">
            <mxPoint x="840" y="340" as="targetPoint"/>
            <Array as="points"/>
         </mxGeometry>
      </mxCell>
      <object-builder action="io.qsrlabs.nexus.middleware.scxml.handlers.ObjectBuilder"
                      label="build response"
                      response="spel:#event[&#34;body&#34;]"
                      id="37">
         <mxCell style="image;html=1;image=clipart/build-object.png" parent="1" vertex="1">
            <mxGeometry x="840" y="300" width="120" height="60" as="geometry"/>
         </mxCell>
      </object-builder>
      <mxCell id="38" style="edgeStyle=orthogonalEdgeStyle;rounded=0;html=1;" parent="1"
              source="37"
              target="9"
              edge="1">
         <mxGeometry relative="1" as="geometry"/>
      </mxCell>
      <session-store action="io.qsrlabs.nexus.middleware.scxml.handlers.SessionVar"
                     label="initialize loop&#xA;counter"
                     name="loop"
                     iteration="spel: 0"
                     id="39">
         <mxCell style="image;html=1;image=clipart/variable.png" parent="1" vertex="1">
            <mxGeometry x="270" y="300" width="120" height="60" as="geometry"/>
         </mxCell>
      </session-store>
      <mxCell id="40" style="edgeStyle=orthogonalEdgeStyle;rounded=0;html=1;" parent="1"
              source="5"
              target="39"
              edge="1">
         <mxGeometry relative="1" as="geometry"/>
      </mxCell>
      <mxCell id="43" style="edgeStyle=orthogonalEdgeStyle;rounded=0;html=1;" parent="1"
              source="39"
              target="16"
              edge="1">
         <mxGeometry relative="1" as="geometry"/>
      </mxCell>
      <event-generator-handler action="io.qsrlabs.nexus.middleware.scxml.handlers.EvaluateParamsAndGenerateEvent"
                               label="check loop counter"
                               evt.break="spel: #session[&#34;loop&#34;][&#34;iteration&#34;] gt 1"
                               id="45">
         <mxCell style="image;html=1;image=clipart/check-list.png" parent="1" vertex="1">
            <mxGeometry x="640" y="450" width="120" height="60" as="geometry"/>
         </mxCell>
      </event-generator-handler>
      <mxCell id="46" value="retry" style="edgeStyle=orthogonalEdgeStyle;rounded=0;html=1;"
              parent="1"
              source="31"
              target="45"
              edge="1">
         <mxGeometry relative="1" as="geometry"/>
      </mxCell>
      <object-builder action="io.qsrlabs.nexus.middleware.scxml.handlers.ObjectBuilder"
                      label="build response with error"
                      response.description="We received suggestions only for solitary activities, sorry!"
                      id="47">
         <mxCell style="image;html=1;image=clipart/build-object.png" parent="1" vertex="1">
            <mxGeometry x="840" y="450" width="120" height="60" as="geometry"/>
         </mxCell>
      </object-builder>
      <mxCell id="48" value="break" style="edgeStyle=orthogonalEdgeStyle;rounded=0;html=1;"
              parent="1"
              source="45"
              target="47"
              edge="1">
         <mxGeometry relative="1" as="geometry"/>
      </mxCell>
      <http-response action="io.qsrlabs.nexus.http.gui.HttpResponseHandler"
                     label="send back response"
                     response-for="initial_http_req"
                     status="spel: 404"
                     body="spel: #session[&#34;response&#34;]"
                     header.Content-Type="application/json"
                     continue="yes"
                     id="50">
         <mxCell style="image;html=1;image=clipart/http-response.png" parent="1" vertex="1">
            <mxGeometry x="1030" y="450" width="120" height="60" as="geometry"/>
         </mxCell>
      </http-response>
      <session-store action="io.qsrlabs.nexus.middleware.scxml.handlers.SessionVar"
                     label="increment loop counter"
                     name="loop"
                     iteration="spel: #session[&#34;loop&#34;][&#34;iteration&#34;] + 1"
                     id="51">
         <mxCell style="image;html=1;image=clipart/variable.png" parent="1" vertex="1">
            <mxGeometry x="640" y="600" width="120" height="60" as="geometry"/>
         </mxCell>
      </session-store>
      <mxCell id="52" value="*" style="edgeStyle=orthogonalEdgeStyle;rounded=0;html=1;"
              parent="1"
              source="45"
              target="51"
              edge="1">
         <mxGeometry relative="1" as="geometry"/>
      </mxCell>
      <mxCell id="53" style="edgeStyle=orthogonalEdgeStyle;rounded=0;html=1;" parent="1"
              source="51"
              target="33"
              edge="1">
         <mxGeometry relative="1" as="geometry"/>
      </mxCell>
      <mxCell id="54" style="edgeStyle=orthogonalEdgeStyle;rounded=0;html=1;" parent="1"
              source="47"
              target="50"
              edge="1">
         <mxGeometry relative="1" as="geometry"/>
      </mxCell>
      <cdr-request action="io.qsrlabs.nexus.cdr.CdrRequestHandler" label="Generate file CDR"
                   queue="cdr-in-queue"
                   template="dev"
                   category="spel:1"
                   segment="test"
                   isfinal="yes"
                   id="62">
         <mxCell style="image;html=1;image=clipart/cdr.png" parent="1" vertex="1">
            <mxGeometry x="1200" y="300" width="120" height="60" as="geometry"/>
         </mxCell>
      </cdr-request>
      <mxCell id="63" style="edgeStyle=orthogonalEdgeStyle;rounded=0;html=1;" parent="1"
              source="9"
              target="62"
              edge="1">
         <mxGeometry relative="1" as="geometry"/>
      </mxCell>
      <mxCell id="64" style="edgeStyle=orthogonalEdgeStyle;rounded=0;html=1;" parent="1"
              source="50"
              target="62"
              edge="1">
         <mxGeometry relative="1" as="geometry"/>
      </mxCell>
      <mxCell id="65"
              value="We added parameter &#34;continue&#34; to the handler; this will send back the answer AND continue with the flow. &#xA;&#xA;Important: &#xA; 1. as state machine executes, an answer is normally sent back to network when state machine stabilizes (i.e. it finishes all possible transitions or reaches a final state, such as stop or a state that has &#34;isfinal&#34; set to &#34;yes&#34;)&#xA; 2. state machine stabilizes when there is no transition to follow out of a state (no outgoing arrow that could be follow)&#xA; 3. the algorithm to follow select transitions is: &#xA;     - first, the transition having a label that matches the current event is searched and if found, it is followed; the match can be based on *, such as http.* .Longest match is selected, most specific, if multiple transitions are matching current event. &#xA;     - second, the transition that has only * is selected, because it matches all events. &#xA;     - third and last, if there is a transition without any label, not event *, than this is selected. The difference between &#34;no label&#34; and &#34;*&#34; is that the &#34;*&#34; requires an event (any event, but an event) to be active; while empty transitions are followed even if there is no event active. &#xA; &#xA;So, in our example, we have &#34;send back response prepared previously&#34; state that prepares the http response (status, headers, body, to be sent), but because there is an empty transition (arrow with no label), the state machine does not stabilize and it follows the transition; because it does not stabilize, the prepared message to network is not send; the state machine follows the empty transition and reaches final state &#34;generate file CDR&#34; that prepares another message (to generate CDR, thus discarding what was prepared by previous state). Now, state machine sends the command to generate the CDR and stops. We need the parameter &#34;continue&#34; to &#34;send back response prepared previously&#34; to not loose the response generated at this shape, but send it right away and continue with elected transition.&#xA;&#xA;     "
              style="shape=note;whiteSpace=wrap;html=1;size=14;verticalAlign=top;align=left;spacingTop=-6;fillColor=#FFFFCC;fontStyle=0;strokeColor=#000000;"
              vertex="1"
              parent="1">
         <mxGeometry x="860" y="540" width="640" height="370" as="geometry"/>
      </mxCell>
   </root>
</mxGraphModel>